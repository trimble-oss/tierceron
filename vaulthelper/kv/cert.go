// Code generated by go-bindata.
// sources:
// ../../certs/cert_files/dcipublic.pem
// ../../certs/cert_files/dcidevpublic.pem
// DO NOT EDIT!

package kv

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _CertsCert_filesDcipublicPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x96\x49\xaf\xab\x3a\x16\x85\xe7\x48\xfc\x87\x9a\x47\xa5\x10\x20\x24\x0c\x6a\x60\x1b\x03\x26\x81\x84\x3e\x30\x23\x90\x98\xd0\x84\x74\x60\xe0\xd7\x97\xce\x39\x4f\xba\xf7\x55\x5d\xe9\x31\xdc\x80\xbd\xd8\x6b\x7d\x78\xff\xfb\xeb\x82\xd8\x20\xce\xbf\x10\xf6\x02\xa2\x13\x04\x02\xfc\x5d\xe5\x39\x9b\x10\x63\xa8\x10\x82\x59\x46\x01\x23\x10\x50\x42\x7c\xa1\x5d\x57\xe2\x0c\xd3\x65\xc8\x34\x37\xb1\x76\x5d\x4a\xca\x21\x77\x80\x8b\xf7\xd0\x05\x8c\x9e\xdd\x11\xcd\xc0\x82\xd4\x89\x78\x0e\x82\x24\x00\x4d\x14\xd8\x1e\x60\x1a\x4d\xb4\xc8\x75\x09\x66\x05\xcc\xdb\x46\x39\x8b\xeb\xd2\xf6\x6c\x86\xdd\xef\xba\x89\xd9\x23\x48\x44\x55\x28\x4c\xa7\x4e\xe2\xb1\xb1\xbd\x8e\xf1\x9c\x01\xbe\xef\xee\xf0\xa8\x9b\x67\xc1\x2b\x53\xc3\x5b\xef\x5b\x67\x38\xfb\x8c\xfa\xf1\xba\xda\x57\xf8\x63\xa3\xb7\x01\x56\x21\x46\xa3\x5d\x67\xa6\x27\xe4\x5a\x37\xec\x45\xa7\xc9\xef\xde\xcc\x73\xfb\xb6\x18\x52\x43\xaf\x53\xb3\xee\x13\x51\xfd\xec\x25\xab\xc9\x0d\x75\xce\x4e\xde\x90\xdf\xeb\xc1\x0e\x6c\x66\xff\x68\xd0\xf0\xf4\x30\xcf\x13\xc4\x49\xec\xd5\x17\x1f\x06\x69\xec\xac\x78\x2e\x6f\x43\xea\x8a\xd1\x54\x18\x4d\x9b\xc5\x4e\x59\x18\x21\x75\x4f\x91\x90\x19\xea\x94\x9d\xbc\x35\x41\x02\xf5\x66\xc2\xcc\x32\x77\xec\x80\x8e\x76\x40\x44\x3b\xc8\x99\x1d\x90\x39\x2e\x73\x87\xe7\xec\x0a\xfc\xbd\x5a\x41\x60\xfb\x98\x99\xec\x7b\xdf\x3d\x1e\x4b\x7c\x16\x57\x65\x16\xcb\xd4\x15\xd5\xbe\x30\xad\xe1\x8c\x60\x9c\xc4\xe3\x23\x35\x74\x81\xe7\xd2\xd8\x1d\x8d\x19\xa4\x5f\x7d\x85\xc0\xb6\xf1\xad\xeb\x53\x23\x92\x0b\x23\x9a\x12\xb1\x2c\xcf\x6d\xf4\xd3\x97\x00\x21\xe0\x93\xff\xf5\x06\xf2\x1c\x74\x81\x46\x29\x3e\x02\x0d\x21\xe0\x76\x88\x52\x0c\xc1\xa1\xd2\xb3\x6c\xc1\xfc\xc7\x79\xec\x43\xa1\x14\xac\xbd\xd4\x09\xc5\x63\x73\xcd\xdd\x31\x7e\xc4\xb3\x74\x8c\x68\xe5\x48\xf7\xf9\x08\x78\x4e\x7a\x42\x8c\xc4\x12\x2a\x2b\x24\x1d\x95\x57\x97\xae\x9c\xdb\x35\xb3\xb7\xf9\x8d\x3e\x0f\xf4\x33\xc7\x3e\xc9\xf7\xe5\x6c\x85\xe3\x76\xb8\x96\x49\x64\x5c\x3f\xc9\x72\xeb\xea\x1d\x91\x04\x07\x35\x0d\xcf\xd5\xd7\xec\x1d\x06\xaf\x30\x8a\x95\xa3\x9f\xdd\xc7\x4d\x7b\x49\x60\x77\xf1\xa5\x97\x93\x44\xba\x32\x2c\x86\xe3\x72\xb3\x26\x7a\xb9\xd8\x05\x3a\x7c\x26\xfa\xe1\x29\x3d\x7b\x6f\xc3\x8c\x8d\x03\xee\xd5\x89\xe7\xd4\x6a\x99\xae\x93\xe5\xe7\xba\xd7\xd5\x5a\xa4\xf5\x72\x3b\xa0\x5d\x9c\x24\x6c\xdc\x61\xc5\x59\x08\x75\x96\x16\x8b\x6b\x98\x64\xfe\xfd\xbd\x35\x4e\xbb\xc1\xd7\x56\x32\x48\x1f\xae\xd0\x3c\x17\x03\xca\x78\xee\x3e\x05\x3b\xc8\xca\x42\x3f\xaa\x62\x1c\x5e\xc7\xb7\xbd\x93\xda\xbb\xde\x6c\x1d\x94\xb0\x67\xb6\xd7\x77\xd3\xe6\x43\x20\x63\xa7\xdb\xe7\x98\x6e\xef\x46\x26\x83\x51\x7d\xba\xb0\xeb\x97\x84\xed\x2b\x9e\x83\x41\xb9\x3b\xfb\xf3\xf6\xd6\xbf\xe8\xc7\x51\xdb\xc0\x63\x29\x5e\x34\x93\x50\xf9\x52\x5f\xc9\x47\x48\xc9\x53\x7c\x3c\x6b\xf5\x98\x23\xc0\x30\x00\xd9\x01\x01\x21\x64\x94\x3a\xd0\x06\xcc\xe0\x39\xb0\x0a\x0b\xcc\x30\x5c\x32\x17\xd9\x00\x30\xf3\x2b\x7f\x9e\xd0\x40\x98\x30\x1d\x24\x64\xc7\x12\x08\xdd\xd0\x04\x0c\x1b\xe8\x2b\xdd\x6e\xa8\x43\x66\x23\x1b\xc8\x5f\x49\x2f\x78\x4e\xfb\x79\x1b\x03\x46\xf4\x4e\x03\xd2\x57\x2e\x4c\x6f\x8b\x6d\x0d\xf4\x36\x9a\xe8\xee\x09\xba\xf2\x96\x76\x85\xe9\xb1\xc3\x6d\x3b\x24\x92\xf5\xfe\x9d\x04\x9e\xfb\x66\x41\x2c\xea\x2c\xce\xa7\x7c\xc6\x9f\x83\x56\x4f\xfb\xd6\x99\xce\x1a\x2c\xbe\x57\xf3\x01\x8e\x2a\x18\xda\x98\x1a\x48\x44\x86\x0f\x0c\x63\x19\x0b\x10\x8e\x39\xb4\xb5\x9a\xf1\x9c\xc3\x7e\x53\x4a\x71\xbc\x13\x4b\xa1\x30\x81\xb2\x9f\xd4\x2a\x3d\x59\x42\x16\xa7\x8f\x44\xd4\x85\xf4\x64\xf7\xa9\xa8\xd6\x3f\x54\xad\xab\xb3\x28\x0c\x79\x1b\x31\x9e\x3b\x4b\xce\xa3\x30\xd4\xe9\xe2\x6f\x19\x02\x89\x91\xca\xd8\x06\x2e\x81\xb6\x99\xfc\xf6\xdd\x18\x42\xa3\x63\x99\x06\x6a\x48\xe9\x0b\x52\xac\x43\x37\x67\x20\x49\x12\x9e\xfb\xc5\xbb\x5a\xe5\x12\xf8\xbf\x7d\x6c\x0c\x7e\xad\x34\x03\x54\x56\xde\xaf\x9e\x88\xd1\xc4\x73\xbf\xa8\x8e\xe6\x7f\xfa\x57\xa4\xa2\xf7\x48\x67\xd2\x27\x92\x25\xd8\x70\xfb\x97\x17\x84\xb9\x89\x0d\x33\xa0\x63\x0d\x0d\xfe\xe5\x30\x6b\xbe\x66\xef\xc8\xbc\x5a\x7e\xde\xef\x25\x12\xf6\x44\x3b\xd8\xe8\xe7\x69\xec\xba\x9d\x8d\x32\xf4\x3b\xbf\x5f\x5e\xfc\x46\x70\x42\xdc\x3f\x93\x0d\x7e\x7c\x71\x65\xac\x53\x37\x2c\x7d\x63\x58\xc5\xab\xad\x76\x48\x0f\x3c\x77\x08\xe7\xfa\x13\x6b\x8b\x35\x19\x5f\x07\x43\x66\x94\xea\x4b\x48\xbb\xaf\x6e\x61\x50\xa4\x6b\x40\x5d\x04\x09\x81\x67\xe6\x23\x10\xbf\x61\xe6\x42\x09\xec\xfc\x35\x4a\x91\x60\xe8\x34\xe4\xb9\x72\xf3\x0e\xba\xf7\x78\xcf\x41\xb7\x75\x52\x8a\x17\xde\x70\xed\x0f\x8e\x34\xbb\x1b\xa2\x15\xcc\x05\x00\xc0\x74\xa5\x49\xca\x19\x03\x00\x5c\x0d\x60\xca\x3c\x4a\x4a\x60\x35\xe8\x75\xd1\x23\x9e\x2b\xb7\xd4\x97\x3b\x69\x7d\x3f\xbd\x0e\x9d\xb3\x90\x71\xd1\xab\x99\xd8\x4a\x5b\xdd\xab\x7a\xd7\x9b\x0e\x78\xe5\x80\x1b\x06\xa5\xb7\x8f\x1a\x45\x90\xf6\x0b\x25\x2a\xde\x1b\x7d\x4a\xf4\xa3\x6c\xa5\x13\xcf\x39\x73\x55\x1e\x77\x72\xf6\x7e\xea\xab\xe3\xaa\xbc\x3f\x8a\x1c\x14\x54\xeb\xfd\x8d\x28\x15\xf9\x9a\xf6\xbd\x8e\x32\x6f\xf1\x92\xd3\x75\xdb\x31\x75\x71\xda\xc0\x49\x24\x36\x18\xcd\xde\xba\x3c\x2b\x95\xe7\x26\x06\x00\x88\x0b\x57\x5d\x6c\x42\x00\x00\x06\x0c\x9a\x36\x0e\x11\x31\x66\x45\x99\x06\xef\xba\xba\xd3\x75\x1f\x3a\xf5\x4e\x00\xdd\x5d\xbe\x19\xb9\x0c\x6a\x49\x03\xb1\x11\x9e\x93\x50\xa6\x3c\xa7\x94\x65\xf4\xa5\xf2\xd6\xec\xd4\x69\xe5\x92\xb6\x5a\x2c\xab\x2a\x8c\x5e\xd8\xbd\xca\x87\x96\xf6\xf5\x8a\x2e\x2c\xc9\x12\x40\x6e\xde\x94\x5c\x2c\x0e\x2e\x28\x28\xbc\x3c\xa4\xe3\x5a\x5a\x9d\x01\xcf\xad\x37\xa1\xe8\x9b\x92\xeb\x5f\xc0\x74\x79\x18\x99\x46\xfc\x12\x97\x3b\x6c\x98\x71\x4c\x4f\xba\x1e\x83\xbf\x34\x2e\x0f\xcf\xbf\x69\x74\xb5\x61\xb9\x75\x4d\x9e\x23\xe7\xe4\x8c\xcf\x7a\x63\x1f\xd6\x0e\x5a\x96\x28\xb7\xc7\x05\xdc\x7f\x34\xdc\x9e\xd6\xa8\x1a\x49\x15\xe6\xd1\x9b\x12\x8a\xcc\xb3\xf2\x78\x35\x4b\x43\xaa\xde\xe3\xfe\x6d\xfb\x4a\x03\x96\x99\x9d\xf0\x5c\x67\x5c\xaa\xe1\xb6\xa5\x7d\x3f\x36\xe2\xb6\xf8\x5c\x28\xf8\xd3\x79\xad\x7d\x9f\x02\x5a\xff\x1e\xb7\xa7\xa6\xb4\xb3\x97\x76\x2d\x7b\x85\xc4\x2e\xcf\xad\x63\xe5\xb2\x15\xfc\x8d\x7c\x9b\x6f\x96\xde\x2e\xb4\xf8\xc4\xee\xb2\x70\x4d\xcc\x26\x10\x4a\xe5\x51\x88\x9b\x9d\x02\xb3\xf6\x6a\x67\x8a\x79\x6f\xec\xd5\x89\x44\x91\xb1\x57\x2f\xef\xb6\xbe\x3e\x60\xcd\x73\xe0\xbc\x1e\x87\x86\x3d\xf6\x8b\x96\x68\xc7\x56\xb9\x90\xf8\xd0\x7f\xa2\x7b\xaf\xfb\x81\x77\xd6\x82\x8c\xa0\x30\x80\x9f\x77\x7a\x9c\xa7\xfa\x66\x29\xe3\x6d\x1b\xeb\xf1\x42\x99\xbb\xf6\x66\x5a\xec\xcd\x73\x4c\x3c\xca\xbd\xaa\xdf\x9f\xd6\x61\x35\x74\x72\xdd\xe6\xe2\x67\xb0\xac\x24\x5f\x1e\x33\xa5\x1b\xe0\x65\x78\xdd\x96\xd6\xd8\x3e\xe3\xe3\x5b\x36\xc6\xea\xd9\xa8\xe0\x6a\x8a\xd4\x27\x02\xf8\x3c\xef\x01\xcf\xdd\xd9\x68\xbe\x50\x92\xb2\xdb\xf9\x64\x3e\xc7\xeb\x05\x47\xad\x63\xf5\x95\x2a\x84\xe1\xce\x0b\x34\x70\x59\x04\xc9\xc6\xab\x02\xc5\xb2\xc3\x8b\x4b\xdb\x93\xe8\xfa\xee\x6d\x2a\xde\x9f\x2e\x67\x8b\x2b\xcf\x29\x53\x38\xe4\xd5\x2e\xef\x2e\x79\x82\x1f\x13\x2c\x61\x21\xe3\x41\x75\xd2\xcc\x1b\x8b\x40\x86\x45\xba\x10\xac\x08\x16\xeb\x60\x11\x9a\xce\xed\x72\xbd\x93\xfb\x15\x0a\x69\x51\x2d\xad\xf2\x75\x58\xf1\xdc\xf1\x25\xfc\x87\xe7\xbe\x87\x2a\xec\x68\x7f\x18\xb4\xfe\x1b\x00\x00\xff\xff\x06\xcf\xef\x9e\x86\x09\x00\x00")

func CertsCert_filesDcipublicPemBytes() ([]byte, error) {
	return bindataRead(
		_CertsCert_filesDcipublicPem,
		"../../certs/cert_files/dcipublic.pem",
	)
}

func CertsCert_filesDcipublicPem() (*asset, error) {
	bytes, err := CertsCert_filesDcipublicPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../certs/cert_files/dcipublic.pem", size: 2438, mode: os.FileMode(420), modTime: time.Unix(1605579199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _CertsCert_filesDcidevpublicPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x56\x49\xd3\xa3\x38\x16\xbc\xf3\x2b\x7c\x1e\xd7\xb4\x01\x6f\xd0\x11\xdf\xe1\x09\xc4\x66\x83\xcd\x6e\xb8\xb1\xef\x60\x03\x36\xe0\x5f\x3f\xe1\xaf\xba\xaa\x3b\x66\x86\xe0\x80\xf2\x3d\xa5\x92\x0c\x65\x48\x28\xc8\x56\x30\x8e\x7d\x11\x3e\xc7\x64\x20\x56\xab\xd5\xaa\xee\xa2\xa0\x3e\x25\x8b\xcc\xff\xb9\x22\xa9\x15\x49\xfe\xf5\x7e\x17\xd3\xbe\x48\xda\xb8\x5e\xb4\xa0\x49\xfe\x5c\xc5\xc9\x1c\xe5\x41\x9c\xbc\x56\x53\x51\xc7\x51\xd0\xc7\xc4\xf0\x0c\xcb\x24\x1a\xbf\x38\x6d\xf5\xb5\xfa\xd7\x1f\xbf\x3b\xfe\x88\xba\x86\x20\x8a\x61\x78\x26\xfd\x17\xb7\xfa\x5a\x89\xe8\xc7\xca\xb4\x3e\x1f\x7d\x12\x8c\x49\xbf\x52\x83\x36\xca\x93\x61\x4c\xfa\x1f\xab\xf3\xea\x6b\x65\x06\x75\xda\xf5\xf1\x8f\xd5\xe5\x33\x48\xa2\xb1\xc8\xba\xd5\xb9\x68\x8a\x31\x89\x7f\xac\xbe\xf9\x7f\xa1\x86\x09\x2b\xbe\x6b\x82\xa2\x5d\x39\x41\x5d\xc4\xc1\x58\x74\xed\xa7\xfa\xec\x93\x95\x99\xf4\xaf\xa4\x5f\x71\x40\x10\xff\xfe\x3c\x08\x8b\xb2\xb6\xe2\xb0\x61\xc9\x82\xcc\x81\x85\xbf\x51\x42\x95\x65\x71\xb0\x38\x0e\xf9\x4d\x06\x93\x8c\x20\x93\xf5\xb4\xbd\x85\x90\x6c\x2f\x86\xec\x14\x4e\xba\x67\xb2\x96\x35\xc0\x02\x0d\x65\xd5\x23\xaf\x0a\x91\x9d\x48\x04\xfa\x20\x00\xcf\x21\xa2\x7c\xe3\xb3\x0a\x95\x08\x94\x8d\x51\xae\x72\x06\x29\xcf\xe2\x1b\x7c\x94\x69\x0e\x82\xcc\xc2\x55\xbc\xf8\xae\x40\xfa\x37\x39\xb3\x5c\xe1\xe9\xd1\x79\x1d\x6d\x8d\x3a\x2a\xb1\xae\xc2\x4e\x24\xbe\x27\xce\xaa\x64\xd3\xc2\xe0\x37\xec\xe2\xf3\xd8\x53\x91\xf7\x4d\xc8\xe5\xea\xd5\xa6\x9d\x32\x16\xeb\x36\x5c\x90\x1a\xb8\xd4\x3d\x16\x9d\x4a\xb5\xa2\x49\xd3\x3d\xde\xd1\x75\x9e\xc0\xcb\xde\xf2\x5d\x8d\x0c\xdc\xf8\x25\x0b\x8a\xa5\x9b\x08\x87\x34\x95\x07\xee\x2e\x73\x1a\x61\x08\x5c\x23\x8f\xc5\xfa\x15\x16\xe8\xd3\x47\x45\x8d\x9d\xd9\xb4\xb3\xc4\x8d\xb3\xc8\x58\x43\x84\x8a\x76\x37\xde\x92\x27\x95\x57\x67\xad\x84\x49\xe5\x61\x52\x85\xee\x83\x2d\x2a\xef\xcd\x17\xfe\x37\x36\x89\xe5\xdf\xea\x60\x9a\xae\xa7\x62\x5f\x11\xfe\x2d\x2f\x03\x51\xa8\xfc\x9b\xf7\xf4\x68\x76\x54\x65\x19\xc9\xe5\x7f\x1b\x86\x05\x80\x0b\x07\x3a\x03\x9f\x3a\x97\x9d\x38\xd0\x31\xb0\x46\x97\x12\xc7\x52\x7b\xe8\x6b\x47\x12\xc5\xd1\x3f\x66\xca\xde\x9f\xae\xc7\x61\x7d\xd1\x90\x2b\xf1\x9b\xa6\x4e\x51\x17\x5c\x13\x2a\x80\xec\x80\x79\xc1\xdc\xe2\x86\x93\xf5\x93\x12\xdc\xef\x64\xc3\x29\x4d\x1a\x10\x4f\x6a\xdb\xb0\xde\xda\xc1\x89\xe7\xd9\x89\x60\xda\xb7\xd3\xb8\xf0\xe5\x7b\xa7\xbf\x1f\xe9\x71\xad\x9e\xee\x0f\x7c\xeb\x75\x4c\x6e\x62\x64\xbe\x1d\x56\x8c\x19\x65\x3d\xec\x60\x36\x39\x31\x7f\x6e\x4f\x04\xef\x25\xbb\x43\x73\x67\x92\xd7\xda\x14\x39\x3d\x17\xe9\x37\xbb\xbd\xc0\x06\x19\xa0\x0a\x46\xbb\xbb\xe7\x8b\x72\x1f\x73\xb8\xf9\xbc\x53\x6c\x5e\xb3\xef\x72\xd7\x1b\xdf\xe2\xb0\x5b\x63\xeb\xda\x74\x44\x8a\x82\x05\x8e\xc1\x36\x75\xdc\x42\xb9\xec\xd6\x56\x22\xd9\x1b\x3e\xd2\x90\xfd\x78\xdd\x7b\xd2\x48\xef\xe9\x96\xab\x9e\x25\xf3\x50\xd8\xad\x54\x85\xed\xa9\x75\x19\xa4\x86\xe5\xee\x20\x1c\x10\xce\x09\xf3\x80\x18\x1a\xb0\x29\x17\x3e\x5b\x84\xac\xe7\x9f\x61\x4a\x9e\xde\x3e\x89\x71\xad\x3e\xac\xc1\x09\xd1\x30\x3f\xae\xa3\x31\x52\xd4\x03\x41\x88\x99\x23\x8b\x34\x1b\xc1\x81\x7a\x47\xe0\x05\x84\xc6\xf2\x1d\x13\xf8\x63\xa6\xd3\x6d\x3d\x5f\x5e\x6f\x5d\xe6\x41\x07\xd4\xed\x64\x3e\x79\x73\x1c\x6c\xa3\x49\x9a\x3c\xde\x31\xc8\x12\xa1\x6c\x12\x3a\xb0\x4b\x6f\x4e\x66\xc1\x1c\x8b\xa7\xb0\x25\x0e\xfe\x6b\xdf\x4c\xb7\xfc\x09\xa2\xe6\x25\x78\x92\xf4\xef\xe6\x0b\x42\x1e\x16\x84\x0e\xc9\x6b\x2b\x8d\x5d\xf7\xa4\x9d\xaa\xe5\x7d\xa0\xf3\x74\x64\x14\xb5\xa6\xc6\xcf\x36\x06\xca\x8e\x09\x7e\xc2\x68\x33\xe9\x18\x26\x59\xe8\x78\x50\x3f\x19\x90\x0c\x15\x41\xca\x60\x28\x01\x54\x44\x7e\x37\x2a\xba\xee\xaa\x48\x17\x39\x6e\x10\x41\xb7\x05\x34\xa9\x08\x65\x59\x4f\xa0\x0c\x0b\x48\x8f\x78\x28\x91\xf2\x3d\xd9\x04\xac\x97\x08\x54\x5e\x17\xb9\xe5\xd3\xac\xa3\xa1\xc4\x9f\x94\x4a\x2a\x67\x4f\xf2\xe4\xc9\xa7\xc9\x43\x48\xb7\x25\xc8\xb0\x4b\x08\x74\x4e\xc6\x12\x7a\x5f\x0a\xe6\x15\xfd\x0e\xce\xbe\x0c\x69\xf2\xa5\x53\xc8\x52\x21\x13\x51\x93\x20\x1e\x30\x07\x16\x87\x72\xf8\x07\x81\x8e\x31\x91\xf0\x88\x56\x31\xf3\xb7\xb4\x37\x70\x79\xa5\x75\xb1\x64\x4c\x1f\x52\x6f\xab\x90\xe7\x56\xab\xbd\xad\x71\xf7\x69\xe6\x7b\xbb\x9f\xa9\x5f\x63\xd6\x24\x6c\x52\xf8\x2b\x7d\x7b\xd7\x73\xe7\xbb\x2f\x0a\x64\xe0\xb2\xcf\xef\x18\xdf\x94\xfa\x57\xf2\x74\x12\x3f\x3f\x64\x2a\xa7\xfe\x73\x31\x44\xe4\x79\xfc\x7b\xb5\x90\xd6\xde\x11\xb7\x7f\xff\x8a\xf7\xb9\xd1\x5e\xa1\x05\xf7\x9f\xc6\x62\x2c\x97\x90\x65\x19\xf3\x38\x37\x46\x9d\x88\x5a\xe7\xb9\x46\x4d\xc4\xc5\xe7\x7f\x69\x8e\x77\xff\x06\x7f\x62\xe4\x94\x65\xd2\x1e\x65\x5d\x8f\x32\x8c\x21\xf6\xf7\x90\xe9\x1c\x92\x65\x74\xd0\x4d\x0e\x12\x1b\xed\x26\xb4\x25\x00\x07\xb5\x93\x8c\xd4\xfa\x8e\x33\xf5\xec\x16\x85\xdb\x92\xcc\x96\x34\xce\x58\x20\x5f\x2f\x4a\x79\xca\x6e\xcf\xbc\xe6\x69\xd3\x50\x12\x00\xa0\xe8\x72\xe5\x06\x93\x01\x00\x9d\x07\x9c\x4d\x84\x91\xc9\x39\xa8\xf3\xd1\xda\xe7\xfd\xc1\x51\x36\x26\x45\xdd\x7c\x5f\xbf\xd0\xee\x95\x32\xb4\x71\x14\x30\xc7\x55\xb7\xa5\xd5\x65\x2a\xd9\xcb\xf5\x1d\x0a\x0c\xb9\xd6\xf2\xe3\x0d\xed\x17\xcb\x6c\x89\x9c\x3e\x1d\x8f\x01\xd5\xa6\x9b\x5c\x88\x8f\x3e\x05\xaf\xc7\xce\xbf\xb9\x07\x7d\xaf\xea\xc1\x71\x80\x78\xe2\xd3\xbb\x73\xe8\x03\x59\xb9\x4a\xf4\x32\x1e\xfb\x3c\xb5\xca\x7d\x70\x18\xe8\x02\x3f\x8c\x07\x71\xeb\x76\x47\x3c\x40\x66\x08\xd3\x23\x9a\x00\xe0\xc6\x97\x53\x2f\x08\x00\x80\x61\x42\xb2\x8a\x3d\x4e\xd6\xb9\x36\x05\x4e\xbb\x9a\xf2\x9b\x95\x98\x6d\x86\x06\xcb\x88\x74\xee\xc2\xd4\x0a\x51\xd9\x4c\xe3\x6c\x8a\x34\xed\x0a\x92\x7e\x6f\xe4\x72\x92\x73\xb8\xe8\xc2\xee\x58\xee\x0d\x6b\xc1\xa9\x77\x6c\xb6\xeb\x4e\xdd\x49\xbb\x4c\x37\xe8\x17\x8e\x84\x25\xde\x29\xd0\x34\x94\x79\x9e\xd7\x24\x01\x92\x07\x7a\x54\x9e\x86\x98\x29\x8c\xaa\xd3\xe7\x07\x3e\x70\xf6\x49\xba\x55\xbb\xb9\x98\x07\xfe\xb0\x1e\xcf\x33\x5d\x4e\x95\x78\x72\xd1\xcb\x03\x00\x61\xda\x31\xa7\xf9\xfc\x71\x14\x54\x20\x8c\x37\x12\x3e\xc6\x1c\xe5\x39\xae\x10\x1e\xa3\x93\x28\xc3\x46\xf1\x98\x5d\xbf\xdb\x3c\x26\xc5\x3d\x77\xb3\xf1\xba\xf1\x42\xa7\xfb\x95\x58\xb7\x7c\x8b\x39\x59\xb8\xef\x8f\xd8\x07\xa3\xf2\x3a\x62\x84\x21\x5f\xd7\x6c\x1c\xa4\xc1\xfa\xd8\xa2\x8a\x6d\x2b\x7c\xf7\xdf\xeb\xe6\x5d\xc6\xe4\xf6\x14\x82\x14\x41\x48\x69\x74\xcf\x4b\x93\x6a\xb4\x5e\xa3\x73\x95\x6d\xdc\x36\xf1\x6c\x47\x38\xae\x38\x62\xd2\xe1\x8e\x3a\x7a\xe1\x94\x6e\x4b\x1b\xea\x2f\x89\x0b\xaf\xff\x94\x68\xf2\x48\xfc\x28\x9c\x46\xbc\x96\x5c\x2e\x19\x4e\xcc\xeb\xf5\x88\xf8\x4c\x8a\x59\xf7\x6a\xd3\xc4\x3d\x0c\x17\x01\x99\xde\xf5\xe9\x74\xd1\xab\x77\xd6\x16\xf9\x71\xdd\xf1\x2f\xcf\xd3\xb8\x78\xf3\x7c\x88\x85\x82\x65\x77\x27\xf7\x9a\x3a\xf7\xe7\x86\xe1\x14\x7d\xb9\x57\xf7\x52\xb5\xcc\xcd\x25\x7d\x13\xf6\xfb\xff\x9c\xba\xdf\x87\x08\x86\xea\x6e\xb3\x86\x4a\xb2\xd6\x96\xe1\xe2\x8e\x6d\x6d\xcd\xbb\x5c\xaa\x43\xb5\xdd\xcc\xd8\x4e\xd3\x4b\xdb\x3e\x03\x62\xa3\x1f\x33\xe3\x92\x6a\xb7\xea\x5a\x8e\x89\x5f\x2f\x4c\xa6\xcc\xc1\xbd\xe6\x2f\xe2\xd0\x16\x55\x0f\xeb\x24\x56\x20\x4d\xf0\xf0\x20\x59\x54\x38\x46\xbf\x33\xb4\xb8\xe6\x9e\x42\x26\xcd\xaa\x74\x23\xfc\xa3\xb9\x6b\x86\x6c\x8f\xcc\x25\xaf\x73\x4d\x69\xc7\xf9\xa1\x42\x78\x2a\x68\x25\xca\x11\x1e\x5f\xd7\xf6\x5d\x4f\xed\x45\xb8\x1e\xa3\xa3\x22\xcb\xaa\x74\x1b\x4b\x6f\x48\xba\x3e\x5f\xf7\x7c\x91\x11\xcb\x31\x34\x0f\x61\x18\x3d\xd2\x66\xa1\x36\x91\x74\x61\x0c\xe3\xed\xed\x34\x39\x17\x5e\x2f\xfa\xb0\x8b\xeb\xb2\x3e\xfb\xd7\x75\xed\xaa\xd1\x9e\xc1\x61\xc8\x9e\xcf\x1b\xd3\x8e\x04\x3b\xe9\x8d\x7d\xad\x12\xe5\xa4\x22\xee\xb1\xa8\xe6\xec\xd0\x5b\xda\x34\xcb\xbb\xe1\x9d\x78\x92\x6d\x99\x45\xc9\xd1\x43\x43\xf1\xa1\xab\xa2\x69\xd0\x2e\xf1\xd3\x34\x90\xea\x0b\x70\x5b\x87\x15\xbf\xf6\x3a\x52\x71\x1e\x3c\x41\x6d\xec\xc0\xdf\xf5\xc5\x5b\xb4\x7a\xa1\x3a\x53\x5e\x76\x5c\x4b\x54\x4f\x49\x4c\x18\x92\xa8\x8c\xf7\x8c\xc3\xb1\x76\xee\xb4\xd9\x29\x7f\x6c\x96\xa8\x99\xbe\xbe\x7e\xde\x99\xb0\xc6\xff\xef\x8d\xe9\x3f\x01\x00\x00\xff\xff\x4b\x6f\xb7\x22\x3c\x0a\x00\x00")

func CertsCert_filesDcidevpublicPemBytes() ([]byte, error) {
	return bindataRead(
		_CertsCert_filesDcidevpublicPem,
		"../../certs/cert_files/dcidevpublic.pem",
	)
}

func CertsCert_filesDcidevpublicPem() (*asset, error) {
	bytes, err := CertsCert_filesDcidevpublicPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../certs/cert_files/dcidevpublic.pem", size: 2620, mode: os.FileMode(420), modTime: time.Unix(1605579396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../certs/cert_files/dcipublic.pem": CertsCert_filesDcipublicPem,
	"../../certs/cert_files/dcidevpublic.pem": CertsCert_filesDcidevpublicPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"certs": &bintree{nil, map[string]*bintree{
				"cert_files": &bintree{nil, map[string]*bintree{
					"dcidevpublic.pem": &bintree{CertsCert_filesDcidevpublicPem, map[string]*bintree{}},
					"dcipublic.pem": &bintree{CertsCert_filesDcipublicPem, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

