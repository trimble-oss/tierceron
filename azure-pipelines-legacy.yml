# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  branches:
    include:
    - releases/legacy/*
    exclude:
    - main
    - develop

pr: 
  autoCancel: 'true'
  branches:
    include:
    - releases/legacy/*
    exclude:
    - main
    - develop

pool:
#  vmImage: 'ubuntu-22.04' TODO: asap update
  vmImage: 'ubuntu-18.04'
resources:
  repositories:
  - repository: VaultConfig.Bootstrap
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Bootstrap
    ref: develop
  - repository: VaultConfig.Test
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Test
    ref: develop
  - repository: VaultConfig.TenantConfig
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.TenantConfig
    ref: develop
  - repository: tierceron-hat
    type: github
    endpoint: trimble-oss
    name: trimble-oss/tierceron-hat
    ref: main
  - repository: client-go
    type: github
    endpoint: trimble-oss
    name: trimble-oss/client-go
    ref: pathvisitor
  - repository: cli-runtime
    type: github
    endpoint: trimble-oss
    name: trimble-oss/cli-runtime
    ref: pathvisitor
  - repository: kubectl
    type: github
    endpoint: trimble-oss
    name: trimble-oss/kubectl
    ref: pathvisitor

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)' # Go workspace path
  GOCACHE: '$(Pipeline.Workspace)/.cache/go-build/'
  GO_CACHE_DIR: $(Pipeline.Workspace)/.cache/go-build/
  modulePath: 'tierceron' # Path to the module's code

steps:
- task: GoTool@0
  inputs:
    version: '1.20.1'
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'
- checkout: VaultConfig.Bootstrap
  clean: false
- checkout: VaultConfig.TenantConfig
  clean: false
- checkout: VaultConfig.Test
  clean: false
- checkout: tierceron-hat
  clean: false
- checkout: client-go
  clean: false
- checkout: cli-runtime
  clean: false
- checkout: kubectl
  clean: false
- checkout: self
  clean: false
# Possibly enable for multi agent, but not convinced worth it...
#- task: Cache@2
#  inputs:
#    key: 'go | "$(Agent.OS)" | $(system.defaultWorkingDirectory)/$(modulePath)/go.mod'
#    restoreKeys: | 
#      go | "$(Agent.OS)"
#    path: $(GO_CACHE_DIR)
#  displayName: Cache GO packages
- script: |
    go version
    pwd
    echo $GOBIN
    echo "Compile start"

    echo "Compile Linux"
    GOOS=linux GOARCH=amd64 GOCACHE=$GOCACHE go install -tags "azure memonly tc vaultname" -ldflags '-w' github.com/trimble-oss/tierceron/{trcconfig,trcpub,trcinit,trcinitp,trcx,trcxp,trcsub}
    for p in trcconfig trcpub trcinit trcinitp trcx trcxp trcsub; do
      echo Compiling $p
      if [[ ! -f $GOBIN/$p ]] ; then
          echo File $p was not built, aborting.
          exit 1
      fi
    done

    echo "Compile Windows"
    GOBIN= CGO_ENABLED=0 GOOS=windows GOARCH=amd64 GOCACHE=$GOCACHE go install -tags "tc vaultname" -ldflags '-w' github.com/trimble-oss/tierceron/{trcconfig,trcpub,trcinit,trcx,trcsub}
    for p in trcconfig trcpub trcinit trcx trcsub; do
      echo Compiling $p
      if [[ ! -f $GOBIN/windows_amd64/$p.exe ]] ; then
          echo File $p.exe was not built, aborting.
          exit 1
      fi
    done

    echo "Compile Mac"
    GOBIN= CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 GOCACHE=$GOCACHE go install -tags "azure memonly tc vaultname" -ldflags '-w' github.com/trimble-oss/tierceron/{trcconfig,trcpub,trcx,trcsub}
    for p in trcconfig trcpub trcx trcsub; do
      echo Compiling $p
      if [[ ! -f $GOBIN/darwin_amd64/$p ]] ; then
          echo File $p was not built, aborting.
          exit 1
      fi
    done

    echo Compiling conflib
    GOOS=linux GOARCH=amd64 GOCACHE=$GOCACHE go build -buildmode=c-shared -tags "azure memonly tc vaultname" -o $GOBIN/nc.so github.com/trimble-oss/tierceron/configlib
    if [[ ! -f $GOBIN/nc.so ]] ; then
        echo File nc.so was not built, aborting.
        exit 1
    fi

    echo "Compile Complete"
    cp $GOBIN/trcconfig $(Build.ArtifactStagingDirectory)/vaultconfig
    cp $GOBIN/trcpub $(Build.ArtifactStagingDirectory)/vaultpub
    cp $GOBIN/trcsub $(Build.ArtifactStagingDirectory)/vaultsub
    cp $GOBIN/trcinit $(Build.ArtifactStagingDirectory)/vaultinit
    cp $GOBIN/trcx $(Build.ArtifactStagingDirectory)/vaultx
    cp $GOBIN/nc.so $(Build.ArtifactStagingDirectory)
    cp $GOBIN/windows_amd64/trcconfig.exe $(Build.ArtifactStagingDirectory)/vaultconfig.exe
    cp $GOBIN/windows_amd64/trcx.exe $(Build.ArtifactStagingDirectory)/vaultx.exe
    cp $GOBIN/windows_amd64/trcinit.exe $(Build.ArtifactStagingDirectory)/vaultinit.exe
    cp $GOBIN/windows_amd64/trcsub.exe $(Build.ArtifactStagingDirectory)/vaultsub.exe
    cp $GOBIN/windows_amd64/trcpub.exe $(Build.ArtifactStagingDirectory)/vaultpub.exe
    cp $GOBIN/darwin_amd64/trcconfig $(Build.ArtifactStagingDirectory)/vaultconfig.mac
  workingDirectory: '$(modulePath)'
  displayName: 'Build - get dependencies when needed.'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: vaultconfig
    buildContext: '$(Build.ArtifactStagingDirectory)'
    command: build
    dockerfile: '**/docker/legacy/vaultconfig/Dockerfile'
    tags: |
      $(Build.SourceVersion)

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: vaultpub
    buildContext: '$(Build.ArtifactStagingDirectory)'
    command: build
    dockerfile: '**/docker/legacy/vaultpub/Dockerfile'
    tags: |
      $(Build.SourceVersion)

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultconfig'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultconfig'
    pushTag: '$(Build.SourceVersion)'
- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultconfig'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultconfig'
    pushTag: 'latest'

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultpub'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultpub'
    pushTag: '$(Build.SourceVersion)'
- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultpub'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultpub'
    pushTag: 'latest'
