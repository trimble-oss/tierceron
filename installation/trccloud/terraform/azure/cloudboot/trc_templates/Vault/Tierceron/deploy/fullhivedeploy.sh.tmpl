#!/bin/bash

echo "This script will install and certify a new hive including a trcshq, trcsh-curator-x, and trcshk or trcsh.exe components."

if [[ -z "${AGENT_VAULT_ADDR}" ]]; then
echo "Enter agent vault host base url: "
read AGENT_VAULT_ADDR
fi

if [[ ! "${AGENT_VAULT_ADDR}" == "https://"* ]]; then
echo "Agent vault host must begin with https:// "
exit -1
fi

if [[ -z "${AGENT_VAULT_TOKEN}" ]]; then
echo "Enter agent root token: "
read AGENT_VAULT_TOKEN
fi

if [[ -z "${SECRET_VAULT_ADDR}" ]]; then
echo "Enter organization vault host base url including port (hit enter if just refreshing org tokens): "
read SECRET_VAULT_ADDR
fi

if [[ ! "${SECRET_VAULT_ADDR}" == "https://"* ]]; then
echo "Organization vault host must begin with https:// "
exit -1
fi

echo "Will this be an traditional aks and windows (aw) or an advanced aks hive kernel (k) cursor? (aw or k): "
read CURSOR_TYPE

if [ "$CURSOR_TYPE" = 'aw' ] || [ "$CURSOR_TYPE" = 'k' ]; then
    echo "Preparing to install cursor type $CURSOR_TYPE..."
else
    echo "Unspported cursor type $CURSOR_TYPE."
    exit 1
fi

echo "Is this a prod environment? (Y or N): "
read PROD_ENV

if [ "$PROD_ENV" = 'Y' ] || [ "$PROD_ENV" = 'y' ]; then
    if [[ -z "${VAULT_ENV}" ]]; then
        echo "Enter organization/agent environment: "
        read VAULT_ENV
    fi

PROD_EXT=""
    for x in "staging" "prod"; do
        if [ $x = $VAULT_ENV ]; then
           PROD_EXT="-prod"
        fi
    done
fi

if [[ -z "${VAULT_ENV_TOKEN}" ]]; then
echo "Enter agent vault *plugin* environment token with tightly confined write permissions(config_token_pluginany): "
read VAULT_ENV_TOKEN
fi

if [ -z "${PROD_EXT}" ]; then
    if [[ -z "${SECRET_VAULT_DEV_PLUGIN_TOKEN}" ]]; then
    echo "Enter organization vault plugin token for certification(config_token_dev_unrestricted): "
    read SECRET_VAULT_DEV_PLUGIN_TOKEN
    fi

    if [[ -z "${SECRET_VAULT_QA_PLUGIN_TOKEN}" ]]; then
    echo "Enter organization vault plugin token for certification(config_token_QA_unrestricted): "
    read SECRET_VAULT_QA_PLUGIN_TOKEN
    fi
else
   if [[ -z "${SECRET_VAULT_PLUGIN_TOKEN}" ]]; then
    echo "Enter organization vault plugin token for certification(config_token_"$VAULT_ENV"_unrestricted): "
    read SECRET_VAULT_PLUGIN_TOKEN
    fi
fi

if [[ -z "${SECRET_VAULT_CONFIG_ROLE}" ]]; then
echo "Enter organization vault bamboo role as <roleid>:<secretid> - "
read SECRET_VAULT_CONFIG_ROLE
fi

if [[ -z "${SECRET_VAULT_PUB_ROLE}" ]]; then
echo "Enter organization vault config pub role as <roleid>:<secretid> - "
read SECRET_VAULT_PUB_ROLE
fi

if [[ -z "${KUBE_PATH}" ]]; then
echo "Enter organization kube config path: "
read KUBE_PATH
fi

VAULT_TOKEN=$AGENT_VAULT_TOKEN
VAULT_API_ADDR=$SECRET_VAULT_ADDR
VAULT_ADDR=$AGENT_VAULT_ADDR
SECRET_VAULT_ENV_TOKEN=$VAULT_ENV_TOKEN

export VAULT_ADDR
export VAULT_TOKEN
export VAULT_API_ADDR
export SECRET_VAULT_ENV_TOKEN
#===============================================================================
#trcsh-cursor-$CURSOR_TYPE undeploy
#===============================================================================

echo "Disable old trcsh-cursor-$CURSOR_TYPE secrets"
vault secrets disable trcsh-cursor-$CURSOR_TYPE/
vault secrets list | grep trcsh-cursor-$CURSOR_TYPE$PROD_EXT
existingplugin=$?
if [ $existingplugin -eq 0 ]; then
    echo "trcsh-cursor-$CURSOR_TYPE plugin still mounted elsewhere.  Manual intervention required to clean up before registration can proceed."
    exit 1
else
    echo "All mounts cleared.  Continuing..."
fi
echo "Unregister old trcsh-cursor-$CURSOR_TYPE plugin"
vault plugin deregister trcsh-cursor-$CURSOR_TYPE$PROD_EXT

echo "Registering trcsh-cursor-$CURSOR_TYPE"

#===============================================================================
#trcsh-cursor-$CURSOR_TYPE deploy
#===============================================================================

if [ -z "${PROD_EXT}" ]; then
    VAULT_ENV="dev"
    if [[ -z "${SECRET_VAULT_ENV_TOKEN}" ]]; then
       SECRET_VAULT_ENV_TOKEN=$SECRET_VAULT_DEV_PLUGIN_TOKEN
    fi
fi

trcplgtool -env=$VAULT_ENV -certify -addr=$SECRET_VAULT_ADDR -token=$SECRET_VAULT_ENV_TOKEN -pluginName=trcsh-cursor-$CURSOR_TYPE -sha256=target/trcsh-cursor-$CURSOR_TYPE

certifystatus=$?
if [ $certifystatus -eq 0 ]; then
   echo "No certification problems encountered."
else
   echo "Unexpected certification error."
   exit $certifystatus
fi

echo "Cursor delivered and ready for deployment? (Y/n): "
read DEPLOYED_SUCCESS

if [ "$DEPLOYED_SUCCESS" = 'N' ] || [ "$DEPLOYED_SUCCESS" = 'n' ]; then
    exit 1
fi

vault plugin register \
          -command=trcsh-cursor-$CURSOR_TYPE$PROD_EXT \
          -sha256=$( cat target/trcsh-cursor-$CURSOR_TYPE$PROD_EXT.sha256 ) \
          -args=`backendUUID=567` \
          trcsh-cursor-$CURSOR_TYPE$PROD_EXT
echo "Enabling trcsh-cursor-$CURSOR_TYPE secret engine"
vault secrets enable \
          -path=trcsh-cursor-$CURSOR_TYPE \
          -plugin-name=trcsh-cursor-$CURSOR_TYPE$PROD_EXT \
          -description="Tierceron Vault trcsh-cursor-$CURSOR_TYPE Plugin" \
          plugin

echo "Deployment and refresh of trcsh-cursor-$CURSOR_TYPE successful"

#================================================================
#trcshq$CURSOR_TYPE deployment (the hive queen)
#================================================================
echo "Preparing trcshq$CURSOR_TYPE for certification"
TRC_PLUGIN_NAME="trcshq$CURSOR_TYPE"

FILE="target/$TRC_PLUGIN_NAME"
if [ ! -f "$FILE" ]; then
    echo "$FILE does not exist."
    exit 1
fi

FILESHA="target/$TRC_PLUGIN_NAME.sha256"
if [ ! -f "$FILESHA" ]; then
    echo "$FILESHA does not exist."
    exit 1
fi

FILESHAVAL=$(cat $FILESHA)

if [ -z "${PROD_EXT}" ]; then
    VAULT_ENV="dev"
    if [[ -z "${SECRET_VAULT_ENV_TOKEN}" ]]; then
       SECRET_VAULT_ENV_TOKEN=$SECRET_VAULT_DEV_PLUGIN_TOKEN
    fi
fi

echo "Certifying trcshq$CURSOR_TYPE"

trcplgtool -env=$VAULT_ENV -certify -addr=$SECRET_VAULT_ADDR -token=$SECRET_VAULT_ENV_TOKEN -pluginName=$TRC_PLUGIN_NAME -sha256=target/$TRC_PLUGIN_NAME -pluginType=agent
        certifystatus=$?
    if [ $certifystatus -eq 0 ]; then
        echo "No certification problems encountered."
    else
        echo "Unexpected certification error."
    fi

echo "trcshq$CURSOR_TYPE successfully certified"

if [ "$CURSOR_TYPE" = 'w' ] || [ "$CURSOR_TYPE" = 'aw' ]; then
    #================================================================
    #trcsh.exe deployment
    #================================================================
    echo "Certifying trcsh.exe worker"
    TRC_PLUGIN_NAME="trcsh.exe"

    FILE="target/$TRC_PLUGIN_NAME"
    if [ ! -f "$FILE" ]; then
        echo "$FILE does not exist."
        exit 1
    fi

    FILESHA="target/$TRC_PLUGIN_NAME.sha256"
    if [ ! -f "$FILESHA" ]; then
        echo "$FILESHA does not exist."
        exit 1
    fi

    FILESHAVAL=$(cat $FILESHA)

    if [ -z "${PROD_EXT}" ]; then
        VAULT_ENV="dev"
        vault kv patch super-secrets/$VAULT_ENV/Index/TrcVault/trcplugin/$TRC_PLUGIN_NAME/Certify trcsha256=$FILESHAVAL
        VAULT_ENV="QA"
        vault kv patch super-secrets/$VAULT_ENV/Index/TrcVault/trcplugin/$TRC_PLUGIN_NAME/Certify trcsha256=$FILESHAVAL
        VAULT_ENV="RQA"
        vault kv patch super-secrets/$VAULT_ENV/Index/TrcVault/trcplugin/$TRC_PLUGIN_NAME/Certify trcsha256=$FILESHAVAL
        echo "Deployed trcsh.exe agent successfully"
    else
        echo "Skipping $TRC_PLUGIN_NAME deployment in prod."
    fi

    echo "trcsh.exe certified and ready for manual deployment."
else
    #================================================================
    #trcshk deployment
    #================================================================
    echo "Certifying trcshk worker"
    TRC_PLUGIN_NAME="trcshk"

    FILE="target/$TRC_PLUGIN_NAME"
    if [ ! -f "$FILE" ]; then
        echo "$FILE does not exist."
        exit 1
    fi

    FILESHA="target/$TRC_PLUGIN_NAME.sha256"
    if [ ! -f "$FILESHA" ]; then
        echo "$FILESHA does not exist."
        exit 1
    fi

    FILESHAVAL=$(cat $FILESHA)

    if [ -z "${PROD_EXT}" ]; then
        VAULT_ENV="dev"
        vault kv patch super-secrets/$VAULT_ENV/Index/TrcVault/trcplugin/$TRC_PLUGIN_NAME/Certify trcsha256=$FILESHAVAL
        VAULT_ENV="QA"
        vault kv patch super-secrets/$VAULT_ENV/Index/TrcVault/trcplugin/$TRC_PLUGIN_NAME/Certify trcsha256=$FILESHAVAL
    else
        vault kv patch super-secrets/$VAULT_ENV/Index/TrcVault/trcplugin/$TRC_PLUGIN_NAME/Certify trcsha256=$FILESHAVAL
    fi

    echo "trcshk certified and ready for release pipeline deployment"

fi
