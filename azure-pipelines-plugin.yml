# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  branches:
    include:
    - releases/plugin/*
    exclude:
    - main
    - develop

pr: 
  autoCancel: 'true'
  branches:
    include:
    - releases/plugin/*
    exclude:
    - main
    - develop

pool:
  vmImage: 'ubuntu-latest'
resources:
  repositories:
  - repository: VaultConfig.Bootstrap
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Bootstrap
    ref: main
  - repository: VaultConfig.Test
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Test
    ref: main
  - repository: VaultConfig.TenantConfig
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.TenantConfig
    ref: main

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)' # Go workspace path
  modulePath: 'tierceron' # Path to the module's code

steps:
- task: GoTool@0
  inputs:
    version: '1.17.10'
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'
- checkout: VaultConfig.Bootstrap
- checkout: VaultConfig.TenantConfig
- checkout: VaultConfig.Test
- checkout: self
- script: |
    go version
    pwd
    echo $GOBIN
    echo "Mod download"
    go mod download
    echo "Compile start"

    echo "Compile Deployer plugin trc-vault-carrier-plugin"
    GOBIN= CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -gcflags=-G=0 -tags "tc memonly awsecr" -o $GOBIN/trc-vault-carrier-plugin tierceron/trcvault/plugins/carrier
    if [[ ! -f $GOBIN/trc-vault-carrier-plugin ]] ; then
        echo File trc vault plugin was not built, aborting.
        exit 1
    fi

    echo "Compile Test Linux trc-vault-plugin"
    GOBIN= CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -gcflags=-G=0 -tags "tc mysql harbinger memonly" -o $GOBIN/trc-vault-plugin tierceron/trcvault/plugins/trcdb
    if [[ ! -f $GOBIN/trc-vault-plugin ]] ; then
        echo File trc vault plugin was not built, aborting.
        exit 1
    fi

    echo "Compile Prod Linux trc-vault-plugin-prod"
    GOBIN= CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -gcflags=-G=0 -tags "tc mysql memonly prod" -o $GOBIN/trc-vault-plugin-prod tierceron/trcvault/plugins/trcdb
    if [[ ! -f $GOBIN/trc-vault-plugin-prod ]] ; then
        echo File trc vault plugin was not built, aborting.
        exit 1
    fi

    sha256sum $GOBIN/trc-vault-carrier-plugin | cut -d' ' -f1 > $GOBIN/trc-vault-carrier-plugin.sha256
    sha256sum $GOBIN/trc-vault-plugin | cut -d' ' -f1 > $GOBIN/trc-vault-plugin.sha256
    sha256sum $GOBIN/trc-vault-plugin-prod | cut -d' ' -f1 > $GOBIN/trc-vault-plugin-prod.sha256

    echo "Compile Complete"
    cp $GOBIN/trc-vault-carrier-plugin $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-carrier-plugin.sha256 $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin  $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin-prod  $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin.sha256  $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin-prod.sha256  $(Build.ArtifactStagingDirectory)
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'
- task: SnykSecurityScan@1
  inputs:
    serviceConnectionEndpoint: 'Spectrum Snyk'
    testType: 'app'
    monitorWhen: 'always'
    failOnIssues: false
    testDirectory: '$(modulePath)'
    targetFile: go.mod
    projectName: 'Tierceron'
    organization: '3e7f6c88-f6ec-4436-8042-85455c5b39e8'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: trc-vault-carrier-plugin
    buildContext: '$(Build.ArtifactStagingDirectory)'
    command: build
    dockerfile: '**/docker/trcvaultplugincarrier/Dockerfile'
    tags: |
      $(Build.SourceVersion)

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: trc-vault-plugin
    buildContext: '$(Build.ArtifactStagingDirectory)'
    command: build
    dockerfile: '**/docker/trcvaultplugin/Dockerfile'
    tags: |
      $(Build.SourceVersion)

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: trc-vault-plugin-prod
    buildContext: '$(Build.ArtifactStagingDirectory)'
    command: build
    dockerfile: '**/docker/trcvaultpluginprod/Dockerfile'
    tags: |
      $(Build.SourceVersion)

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'trc-vault-carrier-plugin'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'trc-vault-carrier-plugin'
    pushTag: '$(Build.SourceVersion)'

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'trc-vault-plugin'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'trc-vault-plugin'
    pushTag: '$(Build.SourceVersion)'
- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'trc-vault-plugin'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'trc-vault-plugin'
    pushTag: 'latest'

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'trc-vault-plugin-prod'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'trc-vault-plugin-prod'
    pushTag: '$(Build.SourceVersion)'
- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'trc-vault-plugin-prod'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'trc-vault-plugin-prod'
    pushTag: 'latest'
