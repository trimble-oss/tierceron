# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  branches:
    exclude:
    - '*'

pr:
  autoCancel: 'true'
  branches:
    include:
    - develop 
    exclude:
    - main

pool: 'TierceronPool'
resources:
  repositories:
  - repository: VaultConfig.Bootstrap
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Bootstrap
    ref: develop
  - repository: VaultConfig.Test
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Test
    ref: develop
  - repository: VaultConfig.TenantConfig
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.TenantConfig
    ref: develop
  - repository: tierceron-hat
    type: github
    endpoint: trimble-oss
    name: trimble-oss/tierceron-hat
    ref: main
  - repository: tierceron-succinctly
    type: github
    endpoint: trimble-oss
    name: trimble-oss/tierceron-succinctly
    ref: main
  - repository: tierceron-nute
    type: github
    endpoint: trimble-oss
    name: trimble-oss/tierceron-nute
    ref: main
  - repository: client-go
    type: github
    endpoint: trimble-oss
    name: trimble-oss/client-go
    ref: refs/tags/v0.0.3
  - repository: cli-runtime
    type: github
    endpoint: trimble-oss
    name: trimble-oss/cli-runtime
    ref: refs/tags/v0.0.7
  - repository: kubectl
    type: github
    endpoint: trimble-oss
    name: trimble-oss/kubectl
    ref: refs/tags/v0.0.5

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)' # Go workspace path
  GOCACHE: '$(Pipeline.Workspace)/.cache/go-build/'
  GO_CACHE_DIR: $(Pipeline.Workspace)/.cache/go-build/
  modulePath: 'tierceron' # Path to the module's code

steps:

- task: GoTool@0
  inputs:
    version: '1.21.4'
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'
- checkout: VaultConfig.Bootstrap
  clean: false
- checkout: VaultConfig.TenantConfig
  clean: false
- checkout: VaultConfig.Test
  clean: false
- checkout: tierceron-hat
  clean: false
- checkout: tierceron-succinctly
  clean: false
- checkout: tierceron-nute
  clean: false
- checkout: client-go
  clean: false
- checkout: cli-runtime
  clean: false
- checkout: kubectl
  clean: false
- checkout: self
  clean: false
# Possibly enable for multi agent, but not convinced worth it...
#- task: Cache@2
#  inputs:
#    key: 'go | "$(Agent.OS)" | $(system.defaultWorkingDirectory)/$(modulePath)/go.mod'
#    restoreKeys: | 
#      go | "$(Agent.OS)"
#    path: $(GO_CACHE_DIR)
#  displayName: Cache GO packages
- script: |
    go version
    pwd
    echo $GOBIN
    echo "Compile start"

    echo "Compile Linux"
    GOOS=linux GOARCH=amd64 GOCACHE=$GOCACHE go install  github.com/trimble-oss/tierceron/{trcconfig,trcpub,trcinit,trcinitp,trcx,trcxp,trcsub}
    for p in trcconfig trcpub trcinit trcinitp trcx trcxp trcsub; do
      echo Compiling $p
      if [[ ! -f $GOBIN/$p ]] ; then
          echo File $p was not built, aborting.
          exit 1
      fi
    done

    echo Compiling trc-vault-plugin
    GOOS=linux GOARCH=amd64 GOCACHE=$GOCACHE go install  -tags "tc memonly" github.com/trimble-oss/tierceron/trcvault/plugins/trcdb
    mv $GOBIN/trcdb $GOBIN/trc-vault-plugin

    if [[ ! -f $GOBIN/trc-vault-plugin ]] ; then
        echo File trc vault plugin was not built, aborting.
        exit 1
    fi

    echo Compiling api
    GOOS=linux GOARCH=amd64 GOCACHE=$GOCACHE go install  github.com/trimble-oss/tierceron/webapi/apiRouter
    if [[ ! -f $GOBIN/apiRouter ]] ; then
        echo File apiRouter was not built, aborting.
        exit 1
    fi

    echo Compiling conflib
    GOOS=linux GOARCH=amd64 GOCACHE=$GOCACHE go build  -buildmode=c-shared -tags "azure memonly tc" -o $GOBIN/nc.so github.com/trimble-oss/tierceron/configlib
    if [[ ! -f $GOBIN/nc.so ]] ; then
        echo File nc.so was not built, aborting.
        exit 1
    fi

    echo "Compile Complete"
    cp $GOBIN/trc* $(Build.ArtifactStagingDirectory)
    cp $GOBIN/apiRouter $(Build.ArtifactStagingDirectory)
    cp $GOBIN/nc.so $(Build.ArtifactStagingDirectory)
  workingDirectory: '$(modulePath)'
  displayName: 'Build - get dependencies when needed.'
- task: SnykSecurityScan@1
  inputs:
    serviceConnectionEndpoint: 'Spectrum Snyk'
    testType: 'app'
    monitorWhen: 'always'
    failOnIssues: false
    testDirectory: '$(modulePath)'
    targetFile: go.mod
    projectName: 'Tierceron'
    organization: '3e7f6c88-f6ec-4436-8042-85455c5b39e8'
    additionalArguments: '-d'  
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
