# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go
trigger:
  branches:
    exclude:
    - main
    - releases/comprehensive/1.0.0
    - releases/plugin/*
    - releases/legacy/*

pr:
  branches:
    include:
    - develop
    - main
    exclude:
    - releases/comprehensive/1.0.0
    - releases/plugin/*

pool: 'TierceronPool'
resources:
  repositories:
  - repository: VaultConfig.Bootstrap
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Bootstrap
    ref: main
  - repository: VaultConfig.Test
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.Test
    ref: main
  - repository: VaultConfig.TenantConfig
    type: git
    endpoint: AzureBuilderConnection
    name: Spectrum/_git/VaultConfig.TenantConfig
    ref: main
  - repository: tierceron-hat
    type: github
    endpoint: trimble-oss
    name: trimble-oss/tierceron-hat
    ref: main
  - repository: client-go
    type: github
    endpoint: trimble-oss
    name: trimble-oss/client-go
    ref: refs/tags/v0.0.3
  - repository: cli-runtime
    type: github
    endpoint: trimble-oss
    name: trimble-oss/cli-runtime
    ref: refs/tags/v0.0.6
  - repository: kubectl
    type: github
    endpoint: trimble-oss
    name: trimble-oss/kubectl
    ref: refs/tags/v0.0.5

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)' # Go workspace path
  GOCACHE: '$(Pipeline.Workspace)/.cache/go-build/'
  GO_CACHE_DIR: $(Pipeline.Workspace)/.cache/go-build/
  modulePath: 'tierceron' # Path to the module's code

steps:
- task: GoTool@0
  inputs:
    version: '1.20.1'
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'
- checkout: VaultConfig.Bootstrap
  clean: false
- checkout: VaultConfig.TenantConfig
  clean: false
- checkout: VaultConfig.Test
  clean: false
- checkout: tierceron-hat
  clean: false
- checkout: client-go
  clean: false
- checkout: cli-runtime
  clean: false
- checkout: kubectl
  clean: false
- checkout: self
  clean: false
# Possibly enable for multi agent, but not convinced worth it...
#- task: Cache@2
#  inputs:
#    key: 'go | "$(Agent.OS)" | $(system.defaultWorkingDirectory)/$(modulePath)/go.mod'
#    restoreKeys: | 
#      go | "$(Agent.OS)"
#    path: $(GO_CACHE_DIR)
#  displayName: Cache GO packages
- script: |
    go version
    pwd
    echo $GOBIN
    echo "Compile start"

    echo "Compile Linux"
    GOBIN= CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GOCACHE=$(GOCACHE) go install -ldflags '-w' -tags "azure memonly tc" github.com/trimble-oss/tierceron/trcsh
    if [[ ! -f $GOBIN/trcsh ]] ; then
        echo File trcsh was not built, aborting.
        exit 1
    fi

    echo "Compile Agent plugin trc-vault-carrier-plugin"
    GOBIN= CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GOCACHE=$(GOCACHE) go install -ldflags '-w' -tags "tc memonly awsecr insecure" github.com/trimble-oss/tierceron/trcvault/plugins/carrier
    mv $GOBIN/carrier $GOBIN/trc-vault-carrier-plugin

    if [[ ! -f $GOBIN/trc-vault-carrier-plugin ]] ; then
        echo File trc vault plugin was not built, aborting.
        exit 1
    fi

    echo "Compile Test Linux trc-vault-plugin"
    GOBIN= CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GOCACHE=$(GOCACHE) go install -ldflags '-w' -tags "tc harbinger memonly" github.com/trimble-oss/tierceron/trcvault/plugins/trcdb
    mv  $GOBIN/trcdb $GOBIN/trc-vault-plugin

    if [[ ! -f $GOBIN/trc-vault-plugin ]] ; then
        echo File trc vault plugin was not built, aborting.
        exit 1
    fi

    echo "Compile Prod Linux trc-vault-plugin-prod"
    GOBIN= CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GOCACHE=$(GOCACHE) go install -ldflags '-w' -tags "tc memonly prod" github.com/trimble-oss/tierceron/trcvault/plugins/trcdb
    mv  $GOBIN/trcdb $GOBIN/trc-vault-plugin-prod

    if [[ ! -f $GOBIN/trc-vault-plugin-prod ]] ; then
        echo File trc vault plugin was not built, aborting.
        exit 1
    fi

    sha256sum $GOBIN/trcsh | cut -d' ' -f1 > $GOBIN/trcsh.sha256
    sha256sum $GOBIN/trc-vault-carrier-plugin | cut -d' ' -f1 > $GOBIN/trc-vault-carrier-plugin.sha256
    sha256sum $GOBIN/trc-vault-plugin | cut -d' ' -f1 > $GOBIN/trc-vault-plugin.sha256
    sha256sum $GOBIN/trc-vault-plugin-prod | cut -d' ' -f1 > $GOBIN/trc-vault-plugin-prod.sha256

    echo "Compile Complete"
    cp $GOBIN/trcsh $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trcsh.sha256 $(Build.ArtifactStagingDirectory)

    cp $GOBIN/trc-vault-carrier-plugin $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-carrier-plugin.sha256 $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin  $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin-prod  $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin.sha256  $(Build.ArtifactStagingDirectory)
    cp $GOBIN/trc-vault-plugin-prod.sha256  $(Build.ArtifactStagingDirectory)
  workingDirectory: '$(modulePath)'
  displayName: 'Build - get dependencies when needed.'
- task: SnykSecurityScan@1
  inputs:
    serviceConnectionEndpoint: 'Spectrum Snyk'
    testType: 'app'
    monitorWhen: 'always'
    failOnIssues: false
    testDirectory: '$(modulePath)'
    targetFile: go.mod
    projectName: 'Tierceron'
    organization: '3e7f6c88-f6ec-4436-8042-85455c5b39e8'
    additionalArguments: '-d'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
